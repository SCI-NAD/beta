name: Deploy Website to AWS S3

on:
  push:
    branches:
      - main  # Triggers the workflow on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Using Node.js version 20
        cache: 'yarn'       # Enable Yarn cache

    - name: Install dependencies
      run: yarn install  # Using Yarn to install dependencies

    - name: Build project
      run: yarn build  # Building the project using Yarn

    - name: Deploy to Amazon S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --delete --exact-timestamps
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SOURCE_DIR: 'dist'  # Directory that contains your build output

    - name: Set Cache-Control headers (Prevent Browser Caching)
      run: |
        aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/ s3://${{ secrets.AWS_S3_BUCKET }}/ \
          --recursive \
          --metadata-directive REPLACE \
          --cache-control "max-age=0, no-cache, no-store, must-revalidate"

    - name: Invalidate CloudFront Cache (If Using CloudFront)
      if: env.AWS_CLOUDFRONT_DISTRIBUTION_ID != ''
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
      env:
        AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
